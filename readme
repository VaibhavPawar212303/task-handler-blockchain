# Flask-Based Blockchain Application

## Overview
This project is a Flask-based blockchain application that implements basic blockchain features along with a task management system. The application allows for the creation of groups, enrollment of participants, task creation, task approval, and blockchain validation. Each task is recorded on the blockchain after meeting certain approval criteria, and users earn reputation points and rewards for their actions.

## Features
- **Blockchain Implementation**: Securely records tasks as blocks in the blockchain.
- **Group Management**: Create groups and manage participants.
- **Task Management**: Create and approve tasks within groups.
- **Reputation System**: Tracks user reputation and enforces thresholds for task approval.
- **Reward System**: Rewards users with coins/points for creating and approving tasks.
- **Flask API**: Exposes endpoints for interacting with the blockchain and task system.

## Installation
1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd <repository-folder>
   ```
2. Set up a virtual environment (optional but recommended):
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```
3. Install dependencies:
   ```bash
   pip install flask
   ```
4. Run the application:
   ```bash
   python app.py
   ```
5. Access the application at `http://127.0.0.1:5000`.

## API Endpoints
### 1. Get Blockchain
**Endpoint**: `/chain`  
**Method**: `GET`  
**Description**: Returns the entire blockchain.  
**Response**:
```json
{
  "chain": [...],
  "length": 1
}
```

### 2. Get Groups
**Endpoint**: `/groups`  
**Method**: `GET`  
**Description**: Returns all groups and their participants/tasks.

### 3. Create Group
**Endpoint**: `/create_group`  
**Method**: `POST`  
**Body**:
```json
{
  "group_name": "example-group"
}
```
**Response**:
```json
{
  "message": "Group example-group created"
}
```

### 4. Enroll in Group
**Endpoint**: `/enroll_in_group`  
**Method**: `POST`  
**Body**:
```json
{
  "group_name": "example-group",
  "participant": "user123"
}
```
**Response**:
```json
{
  "message": "user123 enrolled in example-group"
}
```

### 5. Create Task
**Endpoint**: `/create_task`  
**Method**: `POST`  
**Body**:
```json
{
  "group_name": "example-group",
  "id": "task1",
  "description": "Complete the report",
  "creator": "user123"
}
```
**Response**:
```json
{
  "message": "Task created",
  "task": {
    "id": "task1",
    "description": "Complete the report",
    "creator": "user123"
  }
}
```

### 6. Approve Task
**Endpoint**: `/approve_task`  
**Method**: `POST`  
**Body**:
```json
{
  "group_name": "example-group",
  "task_id": "task1",
  "participant": "user456"
}
```
**Response**:
```json
{
  "message": "Task task1 approved by user456 in example-group"
}
```

### 7. Validate Blockchain
**Endpoint**: `/validate_chain`  
**Method**: `GET`  
**Description**: Checks if the blockchain is valid.

## Project Structure
```
project-folder/
├── app.py              # Main application file
├── README.md           # Documentation
├── venv/               # Virtual environment (optional)
└── requirements.txt    # Dependency list
```
